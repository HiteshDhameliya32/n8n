{
  "nodes": [
    {
      "parameters": {
        "resource": "document",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "text": "identify this doc if it's potential client reach-out or as a signal of another contract opportunity\n\ngive output in yes/no with necessary/essential details about mail and sender's info.\n\nif you are not sure give most suitable answer.\nyou should not hallucinate or assume anything on your own.\nyour answer should be facts based.\n\n",
        "inputType": "binary",
        "binaryPropertyName": "file0",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        432,
        80
      ],
      "id": "2a605ec5-0202-4f95-b63f-9a6e85547a71",
      "name": "Analyze document",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an assistant that combines two analysis outputs: one from an email and one from a document.  \nthen check if i have any history with this client before for that use tools provided\nbased on that give your final responce based on all information\n\nYour tasks:  \n1. Merge both outputs into a single clear response of 5–6 lines.  \n2. Highlight only the essential details that are explicitly mentioned in the email or document.  \n3. Clearly state if this is a potential client reach-out or contract opportunity.  \n4. Include any contact information (name, company, email, phone) if explicitly present.  \n5. Do not hallucinate, infer, or assume anything not directly provided.  \n \n\ndoc:\n{{ $json.parts[0][0].text }}\n\nmail:\n{{ $json.parts[1][0].text }}\n\n",
        "options": {
          "systemMessage": "use provided tools to also find the mail thread for past information for better understanding\n\nRequired Output Format:\n{\n  \"subject\": \"<short subject of the email or document>\",\n  \"client_reach_out\": \"Yes/No\",\n  \"signal_of_another_contract_opportunity\": \"Yes/No\",\n  \"summary\": \"<factual summary with essential/necessary details>\",\n  \"client_details\": {\n    \"name\": \"<client full name if explicitly given, otherwise null>\",\n    \"company_name\": \"<company name if explicitly given, otherwise null>\",\n    \"email\": \"<email address if explicitly given, otherwise null>\",\n    \"contact_no\": \"<phone/contact number if explicitly given, otherwise null>\"\n  }\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1600,
        208
      ],
      "id": "977ea3ed-ad32-4903-b6e2-f456f28e5206",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1696,
        416
      ],
      "id": "0af69600-e387-4f3c-9544-e97a625f6b39",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e62ce983-a932-4eed-b3a4-964c8b7c6304",
              "leftValue": "={{ $('Gmail Trigger').item.json.headers['content-type'] }}",
              "rightValue": "multipart/mixed",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        192,
        96
      ],
      "id": "dd462d8a-910b-4cfb-bbc3-c0f86d9baa59",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1136,
        208
      ],
      "id": "1298061c-c743-4cc7-833c-415d64ef9dab",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "80531bb5-5f68-48f2-aae1-8d1b931abf0b",
              "leftValue": "={{ $('Gmail Trigger').item.json.headers['content-type'] }}",
              "rightValue": "multipart/mixed",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "2924fa56-611a-435d-acee-30d0203ba946",
              "leftValue": "=",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        592,
        336
      ],
      "id": "73e5795b-a828-44f6-89ec-1e5b532c7cf5",
      "name": "If1"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "content.parts[0]"
            },
            {
              "fieldToAggregate": "content.parts[1]"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1392,
        208
      ],
      "id": "84ccf717-ab0d-4542-bd66-059f776b74f6",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "// Helper: pick the first likely key that holds the JSON-as-string\nconst getRaw = (it) =>\n  it?.json?.output ?? it?.json?.result ?? it?.json?.text ?? it?.json?.data ?? null;\n\n// Remove ```json ... ``` fences if present\nconst stripFences = (s) => {\n  if (typeof s !== 'string') return s;\n  let t = s.trim();\n  if (t.startsWith('```')) {\n    // remove opening fence with optional language\n    t = t.replace(/^```[a-zA-Z]*\\s*/, '');\n    // remove trailing fence\n    t = t.replace(/\\s*```$/, '');\n  }\n  return t;\n};\n\n// Parse with fallbacks: strip fences, try raw, then extract first {...}, then fix smart quotes\nconst parseJsonLoose = (s) => {\n  if (s == null) return null;\n  if (typeof s === 'object') return s; // already an object\n  let t = stripFences(String(s));\n\n  try { return JSON.parse(t); } catch {}\n\n  // Try substring between first \"{\" and last \"}\"\n  const a = t.indexOf('{');\n  const b = t.lastIndexOf('}');\n  if (a !== -1 && b !== -1 && b > a) {\n    const candidate = t.slice(a, b + 1);\n    try { return JSON.parse(candidate); } catch {}\n  }\n\n  // Replace smart quotes and retry\n  const dequote = t.replace(/[“”]/g, '\"').replace(/[‘’]/g, \"'\");\n  return JSON.parse(dequote); // let this throw if still invalid\n};\n\ntry {\n  const raw = getRaw(items[0]);\n  const parsed = parseJsonLoose(raw);\n  return [{ json: parsed ?? { parse_error: true, raw_snippet: String(raw).slice(0, 200) } }];\n} catch (e) {\n  return [{\n    json: {\n      parse_error: true,\n      message: e.message,\n      raw_snippet: String(items?.[0]?.json?.output ?? items?.[0]?.json?.result ?? items?.[0]?.json?.text ?? '').slice(0, 300)\n    }\n  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1936,
        208
      ],
      "id": "d5275ab5-3928-45c0-972f-4f3a4920b55e",
      "name": "Code"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "messages": {
          "values": [
            {
              "content": "=analyze this mail for potential client reachout or as signal of another contract opportunity\nsender's address: {{ $('Gmail Trigger').item.json.from.value[0].address }}\nmail subject: {{ $('Gmail Trigger').item.json.subject }}\nmail body: \n{{ $('Gmail Trigger').item.json.text }}"
            }
          ]
        },
        "options": {
          "systemMessage": "identify if it's potential client reach-out or as a signal of another contract opportunity  give output in yes/no with necessary/essential details about mail and sender's info.  if you are not sure give most suitable answer. you should not hallucinate or assume anything on your own. your answer should be facts based.\noutput with this field\n{\ntext: \nneeds to notify: yes/no\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        192,
        336
      ],
      "id": "4bde6129-60b3-4855-8c14-4fc5f02455fb",
      "name": "Message a model1",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ce6ccb18-f2c4-44ce-a0fe-ce299e9e5a3f",
              "leftValue": "={{ $json.client_reach_out }}",
              "rightValue": "Yes",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "31bd7de9-4f50-41e8-93e8-6d0b1eac961d",
              "leftValue": "={{ $json.signal_of_another_contract_opportunity }}",
              "rightValue": "=Yes",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2112,
        208
      ],
      "id": "61f7ad58-6da7-46f3-b56f-ecc2bacd6392",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "56870da7-049a-45ad-920e-fb9decb0fd7a",
              "leftValue": "={{ $json.needsToNotify }}",
              "rightValue": "yes",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        928,
        544
      ],
      "id": "f87e5cf2-fc41-41cc-94d6-9f6576853e0b",
      "name": "If3"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "readStatus": "unread"
        },
        "options": {
          "dataPropertyAttachmentsPrefixName": "file",
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -656,
        -288
      ],
      "id": "c9a0abea-d3e5-47bb-9a26-91d8f3128e1e",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "NwY4EwMpJMKDZsrm",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=subject: {{ $json.subject }}\nText: {{ $json.text }}",
        "options": {
          "systemMessage": "You are a expert at classify emails that are related to potential client reach out or as signal of another contract opportunity\nif mail is about either client reach out or another contract ans yes for any other mail ans No\nyour output should be only in Yes/No "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -432,
        -128
      ],
      "id": "5a0347fd-0657-4014-af81-4f0c1989c891",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -528,
        80
      ],
      "id": "9524e212-055f-485b-8d45-ca6a0dbfdbcf",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b607c59c-0e37-45a8-9837-f218ccba7959",
              "leftValue": "={{ $json.output }}",
              "rightValue": "yes",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -112,
        -128
      ],
      "id": "f3b26f55-b92c-4f7f-b53b-027960d8c49d",
      "name": "If4"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw string from parts[0].text\nconst raw = $json.content?.parts?.[0]?.text || \"\";\n\n// Remove curly braces and newlines, then split\nconst cleaned = raw.replace(/[{}]/g, \"\").trim();\n\n// Extract `text:` and `needs to notify:` using regex\nconst textMatch = cleaned.match(/text:\\s*(.*)\\s*needs to notify:/s);\nconst notifyMatch = cleaned.match(/needs to notify:\\s*(.*)/);\n\nconst text = textMatch ? textMatch[1].trim() : \"\";\nconst needsToNotify = notifyMatch ? notifyMatch[1].trim() : \"\";\n\n// Return separated JSON\nreturn [\n  {\n    json: {\n      text,\n      needsToNotify\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        432
      ],
      "id": "57ac62ad-2d27-4515-8473-5ce71222d751",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "send",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        1168,
        528
      ],
      "id": "fd203ae2-5811-4ebc-88a5-484296a264fd",
      "name": "Send message",
      "webhookId": "c54aa786-f8f8-41b4-b25e-758bb1d379db"
    },
    {
      "parameters": {
        "operation": "send",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        2384,
        224
      ],
      "id": "92da37f5-3ea1-4da6-a24a-97d0ea9fe31b",
      "name": "Send message1",
      "webhookId": "f5260830-90d0-4722-b45e-3a953e93fd61"
    },
    {
      "parameters": {
        "resource": "thread",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1856,
        448
      ],
      "id": "0743aad6-a244-4ec6-9606-f69717f9f10b",
      "name": "Get many threads in Gmail",
      "webhookId": "7e6d9969-d0aa-4084-81d7-641e0a57d983",
      "credentials": {
        "gmailOAuth2": {
          "id": "NwY4EwMpJMKDZsrm",
          "name": "Gmail account"
        }
      }
    }
  ],
  "connections": {
    "Analyze document": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Analyze document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Send message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many threads in Gmail": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ae21f7ff983ee929f98e8d7968bbd21b49d1a44f2e129169348ba847d37dd5ac"
  }
}