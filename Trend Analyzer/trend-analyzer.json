{
  "nodes": [
    {
      "parameters": {
        "formTitle": "topic",
        "formDescription": "Auto-Research Assistant for Market Trends",
        "formFields": {
          "values": [
            {
              "fieldLabel": "topic",
              "placeholder": "one word is enough"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -340,
        -180
      ],
      "id": "10581005-fea5-4431-b274-0a3e21f3b9e4",
      "name": "On form submission",
      "webhookId": "18fd5baa-ff3b-400a-b316-4daa1a15c79d"
    },
    {
      "parameters": {
        "url": "=https://www.reddit.com/search.json?q={{ $json.keyword }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1060,
        -140
      ],
      "id": "f6ebbf4f-d246-46cb-86e2-2003827bd764",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "operation": "search",
        "searchText": "={{ $json.topic }}",
        "limit": 10,
        "additionalFields": {
          "sortOrder": "recency"
        }
      },
      "type": "n8n-nodes-base.twitter",
      "typeVersion": 2,
      "position": [
        860,
        0
      ],
      "id": "e65b0f0b-8711-41c0-9e8c-5b9ab0ab6003",
      "name": "Search Tweets",
      "credentials": {
        "twitterOAuth2Api": {
          "id": "UCPQJbbfRAVubkaP",
          "name": "X account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Assume the input is the whole Reddit response JSON as you showed\nconst children = items[0].json.data.children;\n\nreturn children.map(child => {\n  const d = child.data;\n\n  return {\n    json: {\n      title: d.title,\n      url: d.url, // canonical URL\n      subreddit: d.subreddit,\n      score: d.score,\n      permalink: `https://www.reddit.com${d.permalink}`,\n      num_comments: d.num_comments,\n      created_utc: d.created_utc,\n      thumbnail: d.thumbnail\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        -100
      ],
      "id": "2fc2d116-2482-4a91-88d3-c8c98ea1ea1b",
      "name": "Code"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1560,
        0
      ],
      "id": "e32ed007-b250-45f4-b98e-7ebdb9cb89c4",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75eb3f16-86ad-4f26-99e2-9d74b9fb3285",
              "name": "source",
              "value": "reddit",
              "type": "string"
            },
            {
              "id": "6583726f-b8cc-4f78-a453-05e51023fc12",
              "name": "keyword",
              "value": "={{ $('Code1').item.json.keyword }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1380,
        -60
      ],
      "id": "5f6bcc66-8b49-42bc-8fd7-b2e8f3b98a7a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "90a1c2f6-963d-41a7-ac58-c22ea509f8c1",
              "name": "source",
              "value": "x (formally twitter)",
              "type": "string"
            },
            {
              "id": "cb0e321f-0598-4011-831e-3c223432659c",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "80872f05-f26a-435c-82ff-617a3b43ca79",
              "name": "keyword",
              "value": "={{ $('Code1').item.json.keyword }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1060,
        100
      ],
      "id": "dbe34f3a-c144-4cb4-8d04-e9a3cabd6b9d",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1240,
        160
      ],
      "id": "3353b3e1-5923-4da4-acdc-1562ecb4056e",
      "name": "Aggregate1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1980,
        760
      ],
      "id": "05771ef7-456b-4b40-99bc-25870f7fba0d",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a keyword research assistant. \n\nGiven the following topic: \"{{ $json.topic }}\", do the following:\n\n1. Expand the topic into 5 subtopics that people are actively discussing or searching for.\n2. For each subtopic, generate 2 SEO-friendly, trend-relevant keywords.\n3. Ensure the keywords are concise, clear, and commonly searched terms.\n4. Present the output in the following JSON format:\n\n{\n  \"topic\": \"{{topic}}\",\n  \"subtopics\": [\n    {\n      \"name\": \"Subtopic 1\",\n      \"keywords\": [\"keyword1\", \"keyword2\"]\n    },\n    ...\n  ]\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -100,
        -180
      ],
      "id": "1beebde2-ecf1-4daa-b83b-e55c766a97de",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"topic\": \"{{topic}}\",\n  \"subtopics\": [\n    {\n      \"name\": \"Subtopic 1\",\n      \"keywords\": [\"keyword1\", \"keyword2\"]\n    }\n  ]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        40,
        60
      ],
      "id": "917b3b79-81a6-4ea3-a7d5-04eeda633622",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        80,
        240
      ],
      "id": "dde05994-e310-41f4-8c35-206f370cb8c2",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -140,
        20
      ],
      "id": "5f1f5331-4c72-4508-a202-beffb066d57c",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        620,
        -280
      ],
      "id": "391afab1-444d-4ef2-9cf3-6cf4bdd1ac86",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "const subtopics = $json.output.subtopics || [];\n\nconst keywords = subtopics.flatMap(sub => sub.keywords);\n\nreturn keywords.map(kw => {\n  return {\n    json: {\n      keyword: kw\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -180
      ],
      "id": "a5e9ad5d-6b40-4a14-ba8e-566e6c28f5dd",
      "name": "Code1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "data[0].keyword",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1600,
        -300
      ],
      "id": "c301ca14-1ffc-41f5-a8c0-cf9660564f4e",
      "name": "Split Out"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a research analyst and trend expert.\n\nEvaluate the following content item and provide insights that help decide if this is useful for creating trend-driven content, educational summaries, or platform-specific posts.  \nIf a field like \"upvotes\" or \"comments\" is 0, ignore it when analyzing value.\n\n---\nContent Details:\nTitle: {{ $json.data[0].title }}\nText: {{ $json[\"text\"] || \"No text content available.\" }}\nURL: {{ $json.data[0].url }}\nSubreddit: {{ $json.data[0].subreddit }}\nUpvotes: {{ $json.data[0].score }}\nComments: {{ $json.data[0].num_comments }}\nSource: {{ $json.data[0].source }}\nPermalink: {{ $json.data[0].permalink }}\nKeyword: {{ $('Code1').item.json.keyword }}\n---\n\nBased on this:\n\n1. What is this post about in 1 sentence?\n2. Is this content useful or interesting for a broader audience? Why?\n3. Who would benefit most from this (e.g., marketer, founder, consumer)?\n4. Does this have trend potential? Give a score out of 100.\n5. Suggest a content format this could be turned into (e.g., Instagram reel, LinkedIn post, carousel, newsletter blurb).\n6. Tag this with 1â€“2 topic categories (like: automation, AI agents, marketing trends, consumer behavior).\n7. Suggest 1 clear keyword this content ranks for or is relevant to.\n\nReturn the result in this exact JSON format:\n{\n  \"summary\": \"...\",\n  \"audience\": \"...\",\n  \"trend_score\": 85,\n  \"format_suggestion\": \"...\",\n  \"categories\": [\"...\", \"...\"],\n  \"keyword\": \"...\"\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2380,
        -180
      ],
      "id": "073ab345-b33a-4f44-acb3-966bc1a243a4",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2080,
        -300
      ],
      "id": "66539b94-883b-412e-bf2f-62ce2ac4e82e",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2340,
        0
      ],
      "id": "17f77c57-5c38-4fe8-803c-3b328a1cbcf9",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"summary\": \"...\",\n  \"audience\": \"...\",\n  \"trend_score\": 85,\n  \"format_suggestion\": \"...\",\n  \"categories\": [\"...\", \"...\"],\n  \"keyword\": \"...\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2560,
        20
      ],
      "id": "24f5b926-d950-4eca-9129-dcedec256762",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2660,
        220
      ],
      "id": "bf870ecd-eeb5-4a0e-b766-0634d1b14450",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a strategic trend analyst.\n\nYou will be given a list of analyzed content items. Each item contains insights like summary, audience, trend score, categories, and format suggestions.\n\nYour goal is to:\n1. Review all the items.\n2. Select the **top 3â€“5 items** based on **trend_score, audience relevance, and uniqueness**.\n3. Group them into **final themes or topics** if multiple posts relate to the same trend.\n4. Suggest 1â€“2 **content strategy ideas** based on these findings (e.g., \"Create a content series on online dating apps\" or \"Make a video breakdown of AI productivity tools\").\n5. Return a final summary of your recommendation.\n\nHere is the content batch:\n\n{{ JSON.stringify($json) }}\n\nRespond in this JSON format:\n\n{\n  \"final_trends\": [\n    {\n      \"title\": \"Best Dating Apps in 2024\",\n      \"reason\": \"High engagement and wide appeal to both users and dating app makers\",\n      \"recommended_format\": \"LinkedIn carousel or Blog article\",\n      \"category\": \"Online Dating\"\n    },\n    {\n      \"title\": \"AI Replacing Jobs\",\n      \"reason\": \"Strong emotional impact, relevant for general and professional audience\",\n      \"recommended_format\": \"Instagram Reel or YouTube Short\",\n      \"category\": \"Future of Work\"\n    }\n  ],\n  \"strategy_recommendations\": [\n    \"Create a trend spotlight series on social platforms using content with high trend scores and emotional relevance.\",\n    \"Develop content clusters based on categories like 'AI' and 'Consumer Tech' to improve reach and niche authority.\"\n  ],\n  \"summary\": \"These trends reflect current user interests across Reddit and other platforms, particularly in AI disruption and online lifestyle tools. The content formats suggested match the platforms where these topics are actively discussed.\"\n}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3060,
        -320
      ],
      "id": "19009c00-e0bf-43cd-9b2f-647ca4e44b9b",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3000,
        -120
      ],
      "id": "d30344f4-71ea-47b7-bcdb-a9a92066bb69",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "0qx7MVBn4PpeYK6I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\nfor (const item of $input.all()) {\n  const rawOutput = item.json.output;\n\n  // Remove code block markers (e.g., ```json\\n ... \\n```)\n  const cleanedJsonString = rawOutput\n    .replace(/^```json\\s*/i, '') // remove opening ```json\n    .replace(/```$/i, '')        // remove closing ```\n    .trim();\n\n  // Parse the cleaned JSON string\n  const parsed = JSON.parse(cleanedJsonString);\n\n  // Push structured output to be used downstream\n  items.push({ json: parsed });\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3420,
        -320
      ],
      "id": "1c07bcc4-7dce-4813-b7a7-3738699938dd",
      "name": "Code2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        820,
        600
      ],
      "id": "e225cc5d-cabc-48be-a3df-09c0fb9d005a",
      "name": "add more source"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        840,
        300
      ],
      "id": "b9404d81-d02e-4c1d-a578-8dd0f17c9b22",
      "name": "add source"
    }
  ],
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Tweets": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Search Tweets",
            "type": "main",
            "index": 0
          },
          {
            "node": "add more source",
            "type": "main",
            "index": 0
          },
          {
            "node": "add source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ae21f7ff983ee929f98e8d7968bbd21b49d1a44f2e129169348ba847d37dd5ac"
  }
}